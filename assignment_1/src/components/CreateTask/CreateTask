import React, { Component } from 'react';
import NativeModal from 'react-native-modal';
import {  ScrollView, View, Text, StyleSheet, TextInput, Picker, TouchableOpacity, Switch} from 'react-native';
import styles from './styles';
import { ColorPicker } from 'react-native-color-picker';
import { Dropdown } from 'react-native-material-dropdown';
import data from '../../resources/data.json';


class CreateTask extends React.Component {
  state = {
    maxId: '',
    name: '',
    description:'',
    finished: false,
    isValid: false,
    nameRequired: '',
    listId: '',
  }

  updateName(name) {
    // Name of board has to be at least 3 characters
    if (name.length > 2) {
      this.setState({ isValid: true });
    // If name of board becomes less than 3 characters we make the form invalid for submission
    } else {
      this.setState({ isValid: false });
    }
    this.setState({name});
    var maxId = 0;
    data.tasks.map(function(obj){
      if (obj.id > maxId) maxId = obj.id;
    });
    maxId += 1
    this.setState({maxId});
  }
  updateDescription(description) {
    this.setState({description});
  }
  updateFinished(finished) {
    this.setState({finished});
  }
  determineErrorMsg() {
    const { isValid } = this.state;
    if (isValid === false) {
      this.setState({ nameRequired: 'Name of the task must be more than two characters.' });
    } else {
      this.setState({ nameRequired: '' });
    }
  }
  cleanUp(Submit){
    const { listId, maxId, name, description, finished } = this.state;
    const { closeModal, addTask } = this.props;
    newTask = {
      "id": maxId,
      "name": name,
      "description": description,
      "finished": finished,
      "listId": listId
    }
    this.setState({
      maxId: '',
      name: '',
      description:'',
      finished: false,
      isValid: false,
      nameRequired: '',
      listId: '',
    })
    // If Submit was pressed we add the board to our data
    if (Submit) {
      addTask(newTask);
    } else {
    // GoBack was pressed - Closing the model after clearing the error message
      closeModal();
    }
  }
  render() {
    const { isOpen, closeModal, listId} = this.props;
    const { name, description, finished, isValid, nameRequired } = this.state;
    return(
      <NativeModal
        isVisible={isOpen}
        hasBackdrop
        onBackButtonPress={closeModal}
        onSwipeComplete={closeModal}
        SwipeDirection={[ "up", "down" ]}
        style={styles.modal}>
        <ScrollView style={styles.container}>
          <Text style={styles.title}>Creating a New Task</Text>
          <Text style={{ color: 'red' }}>{nameRequired}</Text>
          <TextInput
            placeholder="Name"
            placeholderTextColor = "black"
            style={[styles.textInput,{height: 50}]}
            value={this.state.name}
            onChangeText={ text => this.updateName(text)}/>
          <TextInput
            style={[styles.textInput, {height:200}]}
            placeholder="Description (optional)"
            placeholderTextColor="black"
            editable={true}
            multiline = {true}
            value={this.state.description}
            onChangeText={ text => this.updateDescription(text)}/>
          <View style={{flexDirection:'row'}}>
            <Text style={{marginRight:15}}>Is the task finished?</Text>
            <Switch
              onValueChange={value => this.updateFinished(value)}
              value={this.state.finished}/>
          </View>
          <View style={{flexDirection:'row'}}>
            <TouchableOpacity 
              style={styles.button} 
              onPress={isValid ? () => this.cleanUp(true) : () => this.determineErrorMsg()}
            >
                <Text 
                  style={styles.btntxt}>
                    Submit
                  </Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.button} onPress={this.cleanUp(false)}><Text style={styles.btntxt}>Go Back</Text></TouchableOpacity>
          </View>
        </ScrollView>
      </NativeModal>
    );
  }
}

export default CreateTask;
